"""Проблема: Вы хотите эффективно управлять ресурсами, такими как файлы, сокеты
или подключения к базам данных, в вашей программе на Python, обеспечивая при этом
правильные действия по настройке и очистке. Важно понять, как использовать
оператор with для упрощения управления ресурсами, особенно при работе с объектами,
поддерживающими менеджеры контекста.

Решение:

Оператор with: Оператор with упрощает управление ресурсами, гарантируя, что
действия по настройке и очистке выполняются до и после блока кода. Он часто 
используется с объектами, имеющими определенные менеджеры контекста, которые
реализуют методы enter и exit.

Общий синтаксис
with context_manager as variable: # Блок кода, использующий ресурс

Как это работает:

context_manager - это объект, который реализует методы enter и exit.
enter настраивает ресурс, а exit выполняет задачи по очистке.
Когда входим в блок with, вызывается enter, настраивая ресурс. Результат enter
может быть опционально присвоен переменной, указанной в as-клаузе.
Блок кода внутри оператора with выполняется, используя ресурс или контекст,
настроенный в enter.
Когда блок кода выходит, вызывается exit, гарантируя освобождение и очистку ресурса.

Пример:
Открытие и работа с файлом с использованием 'with'

file_path = 'example.txt'
with open(file_path, 'r') as file:
     data = file.read()

Файл автоматически закрывается при выходе из блока 'with'"""

file_path = 'example.txt'
with open(file_path, 'r') as file:
        print(file.read())
        