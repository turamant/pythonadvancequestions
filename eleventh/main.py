"""11. Понимание миксинов в объектно-ориентированном программировании

Проблема: вы хотите понять концепцию примесей в объектно-ориентированной среде
программирования и понять их роль в повышении возможности повторного использования кода и
расширение функциональности класса.

Решение: Миксин — это класс, который предоставляет определенные функции, которые можно
унаследовать другими классами, способствуя повторному использованию кода и модульному
подходу к расширеню поведения классов.

Ключевые характеристики миксинов включают в себя:
Единая ответственность: миксины инкапсулируют одно конкретное поведение.
Возможность повторного использования: они предназначены для использования в нескольких классах,
что позволяет сократить объем кода и дублирование.
Наследование: класс может наследовать один или несколько миксинов, чтобы получить их
функциональность.
Композиция важнее наследования. Миксины способствуют композиции, позволяя вам
добавлять определенное поведение без сложных иерархий классов.

Разрешение конфликтов: когда примеси определяют один и тот же метод или атрибут,
могут потребоваться механизмы разрешения конфликтов.

В Python миксины используются для улучшения классов посредством композиции и
обычно используется в контексте кооперативного множественного наследования,
использование порядка разрешения метода (MRO) для разрешения вызовов методов
предсказуемо.

Примеры миксинов включают LoggableMixin для функции ведения журнала или
SerializableMixin для возможностей сериализации. Включив эти миксины в
различные классы, вы можете эффективно расширить их функциональность, следуя
принципам чистого и модульного кода."""

import logging

# Настраиваем логирование
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class LoggingMixin:
    def log(self, message):
        logger.info(message)

# Класс, который будет использовать миксин
class MyClass(LoggingMixin):
    def do_something(self):
        self.log("Пишем лог")
        # Ваша логика тут
        print("Сделали действие")

if __name__ == "__main__":
    # Создаем объект MyClass и вызываем метод do_something
    obj = MyClass()
    obj.do_something()
