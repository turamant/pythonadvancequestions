"""Задача: Объясните концепцию итераторов в Python.
Опишите, как работают итераторы, как создавать пользовательские итераторы с использованием
функций iter() и next(), и как использовать итераторы в циклах for.
Приведите примеры, иллюстрирующие использование итераторов в программировании на Python.

Решение:

Итераторы в Python: Итератор в Python - это объект, который представляет поток данных.
Он позволяет вам итерировать (перебирать) по коллекции, последовательности или потоку
значений по одному. Основная идея итератора - предоставить способ доступа к элементам
коллекции последовательно, не раскрывая внутренние детали структуры данных коллекции.

Работа с итераторами: В Python следующие термины и функции связаны с итераторами:

Итерируемый объект (iterable): Объект, способный возвращать свои элементы по одному.
Примерами итерируемых объектов являются списки, кортежи, строки, словари и многие другие.

Итератор (iterator): Объект, который представляет поток данных из итерируемого объекта.
Он имеет два основных метода: iter() и next().
iter(): Возвращает сам объект итератора.
next(): Возвращает следующий элемент из итератора. Если больше нет элементов,
он генерирует исключение StopIteration."""

my_list = [1, 2, 3, 4, 5]
# Создаем итератор из списка
iterator = iter(my_list)
# Используем итератор для получения элементов
print(next(iterator))  # Вывод: 1
print(next(iterator))  # Вывод: 2


class MyIterator:
    def __init__(self, data):
        self.data = data
        self.index = 0

    def __iter__(self):
        return self

    def __next__(self):
        if self.index < len(self.data):
            value = self.data[self.index]
            self.index += 1
            return value
        else:
            raise StopIteration()

# Использование итератора

my_iterator = MyIterator(my_list)

try:
    while True:
        item = next(my_iterator)
        print(item)
except StopIteration:
    print("Достигнут конец итерации")

