"""1. Зачем бы вы использовали оператор pass ?
Проблема: В Python бывают ситуации, когда вам нужен способ создать
заполнитель или подтвердить операцию без указания ее деталей. Это
особенно часто встречается при разработке и проектировании кода, когда определенные части
вашего кода еще не полностью реализованы.

Решение: Оператор pass в Python служит простым решением.
Он используется в следующих сценариях:
Заглушка кода: используйте слово «pass» в качестве заполнителя при определении функций,
классов, или блоки кода, которые еще не реализованы.

def my_function():
    pass # Заполнитель для будущей реализации

Условные операторы: в условных ветвях используйте «pass» для подтверждения.
условие без необходимости выполнения определенного кода.

if condition:
    # Код для запуска, когда условие истинно
else:
    pass # Подтверждает случай False без каких-либо действий

Пустые классы: для определений классов без атрибутов или методов используйте «pass».
в качестве заполнителя.

class MyClass:
    pass # Ожидание добавления атрибутов и методов

Обработка исключений: при обработке исключений используйте «pass» для подтверждения.
исключение без выполнения конкретных действий.
    try:
        # Код, который может вызвать исключение
    except SomeException:
        pass # Подтверждает исключение без каких-либо действий

Структуры циклов. В циклах используйте слово «pass» в качестве заполнителя, когда вам нужно
перебирать элементы без выполнения определенных действий.
    for element in my_list:
        pass # Заполнитель для будущей обработки"""
        
        
class MyClass:
    pass

    def my_function(self):
        pass
    
    def condition(self):
        if 1 < 10:
            pass
        else:
            pass
        
    def forexample(self):
        for i in [1, 2, 3, 4, 5]:
            pass
        