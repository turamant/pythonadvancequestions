"""17. Линейный (последовательный) поиск и его использование.

Задача: объяснить концепцию ближнего (последовательного) поиска в компьютерной науке.
Приведите пример того, как выполнить линейный поиск в Python и
обсудить его использование и ограничения.

Решение: Линейный поиск, также известный как последовательный поиск, представляет собой простой
алгоритм, используемый для поиска определенного элемента в списке или массиве путем повторения
элементы один за другим, пока не будет найден целевой элемент или пока весь
список исчерпан.

Вот пример того, как выполнить линейный поиск в Python:
def line_search(arr, target):
    for i, element in enumerate(arr) :
        if element == target:
            return i # Возвращает индекс цели, если она найдена
        return -1 # Вернуть -1, если цель не найдена

# Пример использования:
my_list = [ 10 , 25 , 76, 8, 30, 15]
target_element = 8
result = line_search(my_list, target_element)
if result != -1:
    print(f"Элемент {target_element} найден по индексу {result}. " )
else:
    print(f "Элемент {target_element} не найден в списке.")
    
Использование: Линейный поиск прост и подходит для списков небольшого и среднего размера
или массивов. Его легко реализовать, и он не требует сортировки данных. Некоторые
распространенные случаи использования, в том числе:
1.Поиск несортированных данных: когда вам нужно найти элемент в несортированных данных.
Сбор данных, а также ближний поиск являются жизнеспособным вариантом.
2. Поиск первого вхождения: линейный поиск полезен для поиска первого вхождения.
элемента в списке.
3. Реализация других алгоритмов поиска. Линейный поиск часто используется в качестве 
блокировки более сложного поиска по алгоритму, например двоичный поиск"""


def line_search(arr, target):
    """Линейный поиск

    Args:
        arr (_type_): _Последовательность_
        target (_type_): _Искомое число_

    Returns:
        _type_: _Индекс найденного элемента_ или -1
    """
    for i, element in enumerate(arr) :
        if element == target:
            return i # Возвращает индекс цели, если она найдена
    return -1 # Вернуть -1, если цель не найдена

# Пример использования:
if __name__ == '__main__':
    my_list = [ 10 , 25 , 76, 8, 30, 15]
    TARGET_ELEMENT = 8
    result = line_search(my_list, TARGET_ELEMENT)
    if result != -1:
        print(f"Элемент {TARGET_ELEMENT} найден по индексу {result}. " )
    else:
        print(f"Элемент {TARGET_ELEMENT} не найден в списке.")